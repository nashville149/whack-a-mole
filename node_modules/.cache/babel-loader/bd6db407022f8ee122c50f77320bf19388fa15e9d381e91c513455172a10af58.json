{"ast":null,"code":"var _jsxFileName = \"/home/wycliff/documents/react/whack-a-mole/src/Components/Pause.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import GameTimer from \"./Gametimer\";\n// import GameBoard from \"./GameBoard\";  // your mole grid component\n\n// const MOLE_COUNT = 9; // say you have 9 holes\n\n// function Game() {\n//   const [paused, setPaused] = useState(true);\n//   const [showMenu, setShowMenu] = useState(true);\n//   const [resetKey, setResetKey] = useState(0);\n//   const [started, setStarted] = useState(false);\n//   const [moles, setMoles] = useState(Array(MOLE_COUNT).fill(false));\n//   const [score, setScore] = useState(0);\n\n//   useEffect(() => {\n//     if (!paused) {\n//       const moleInterval = setInterval(() => {\n//         const nextMoles = Array(MOLE_COUNT).fill(false);\n//         const randomIndex = Math.floor(Math.random() * MOLE_COUNT);\n//         nextMoles[randomIndex] = true;\n//         setMoles(nextMoles);\n//       }, 1000);\n//       return () => clearInterval(moleInterval);\n//     } else {\n//       setMoles(Array(MOLE_COUNT).fill(false)); // hide moles if paused\n//     }\n//   }, [paused, resetKey]);\n\n//   const handleWhack = (index) => {\n//     if (moles[index]) {\n//       setScore((prev) => prev + 1);\n//       const newMoles = [...moles];\n//       newMoles[index] = false;\n//       setMoles(newMoles);\n//     }\n//   };\n\n//   function handleStart() {\n//     setPaused(false);\n//     setShowMenu(false);\n//     setStarted(true);\n//     setScore(0);\n//   }\n\n//   function handleResume() {\n//     setPaused(false);\n//     setShowMenu(false);\n//   }\n\n//   function handlePause() {\n//     setPaused(true);\n//     setShowMenu(true);\n//   }\n\n//   function handleRestart() {\n//     setResetKey((prev) => prev + 1);\n//     setPaused(false);\n//     setShowMenu(false);\n//     setStarted(true);\n//     setScore(0);\n//   }\n\n//   function handleTimeUp() {\n//     setPaused(true);\n//     setShowMenu(true);\n//     alert(Time is up! Your score: ${score});\n//   }\n\n//   return (\n//     <div style={{ textAlign: \"center\", marginTop: \"50px\" }}>\n//       <h2>Score: {score}</h2>\n//       <GameTimer\n//         startTime={30}\n//         paused={paused}\n//         resetTrigger={resetKey}\n//         onTimeUp={handleTimeUp}\n//       />\n\n//       {showMenu ? (\n//         <div style={{ marginTop: \"20px\" }}>\n//           <h2>{started ? \"Timer Paused\" : \"Timer Ready\"}</h2>\n//           {!started ? (\n//             <button onClick={handleStart}>Start</button>\n//           ) : (\n//             <>\n//               <button onClick={handleResume}>Resume</button>\n//               <button onClick={handleRestart} style={{ marginLeft: \"10px\" }}>\n//                 Restart\n//               </button>\n//             </>\n//           )}\n//         </div>\n//       ) : (\n//         <button onClick={handlePause} style={{ marginTop: \"20px\" }}>\n//           Pause\n//         </button>\n//       )}\n\n//       <GameBoard moles={moles} handleWhack={handleWhack} />\n//     </div>\n//   );\n// }\n\n// export default Game;\n\nimport React, { useState, useEffect } from \"react\";\nimport GameTimer from \"./Gametimer\";\nimport GameBoard from \"./GameBoard\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MOLE_COUNT = 9;\nfunction Game() {\n  _s();\n  const [paused, setPaused] = useState(true);\n  const [showMenu, setShowMenu] = useState(true);\n  const [resetKey, setResetKey] = useState(0);\n  const [started, setStarted] = useState(false);\n  const [moles, setMoles] = useState(Array(MOLE_COUNT).fill(false));\n  const [score, setScore] = useState(0);\n  useEffect(() => {\n    if (!paused) {\n      const moleInterval = setInterval(() => {\n        const nextMoles = Array(MOLE_COUNT).fill(false);\n        const randomIndex = Math.floor(Math.random() * MOLE_COUNT);\n        nextMoles[randomIndex] = true;\n        setMoles(nextMoles);\n      }, 1000);\n      return () => clearInterval(moleInterval);\n    } else {\n      setMoles(Array(MOLE_COUNT).fill(false));\n    }\n  }, [paused, resetKey]);\n  const handleWhack = index => {\n    if (moles[index]) {\n      setScore(prev => prev + 1);\n      const newMoles = [...moles];\n      newMoles[index] = false;\n      setMoles(newMoles);\n    }\n  };\n  function handleStart() {\n    setPaused(false);\n    setShowMenu(false);\n    setStarted(true);\n    setScore(0);\n  }\n  function handleResume() {\n    setPaused(false);\n    setShowMenu(false);\n  }\n  function handlePause() {\n    setPaused(true);\n    setShowMenu(true);\n  }\n  function handleRestart() {\n    setResetKey(prev => prev + 1);\n    setPaused(false);\n    setShowMenu(false);\n    setStarted(true);\n    setScore(0);\n  }\n  function handleTimeUp() {\n    setPaused(true);\n    setShowMenu(true);\n    alert(`Time is up! Your score: ${score}`);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"50px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameTimer, {\n      startTime: 30,\n      paused: paused,\n      resetTrigger: resetKey,\n      onTimeUp: handleTimeUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), showMenu ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: started ? \"Timer Paused\" : \"Timer Ready\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), !started ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStart,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleResume,\n          children: \"Resume\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRestart,\n          style: {\n            marginLeft: \"10px\"\n          },\n          children: \"Restart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePause,\n      style: {\n        marginTop: \"20px\"\n      },\n      children: \"Pause\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }, this), started && /*#__PURE__*/_jsxDEV(GameBoard, {\n      moles: moles,\n      handleWhack: handleWhack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"7Fu+IBsAc8iSTVuxHDy1Ost0VdU=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","GameTimer","GameBoard","jsxDEV","_jsxDEV","Fragment","_Fragment","MOLE_COUNT","Game","_s","paused","setPaused","showMenu","setShowMenu","resetKey","setResetKey","started","setStarted","moles","setMoles","Array","fill","score","setScore","moleInterval","setInterval","nextMoles","randomIndex","Math","floor","random","clearInterval","handleWhack","index","prev","newMoles","handleStart","handleResume","handlePause","handleRestart","handleTimeUp","alert","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","startTime","resetTrigger","onTimeUp","onClick","marginLeft","_c","$RefreshReg$"],"sources":["/home/wycliff/documents/react/whack-a-mole/src/Components/Pause.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import GameTimer from \"./Gametimer\";\n// import GameBoard from \"./GameBoard\";  // your mole grid component\n\n// const MOLE_COUNT = 9; // say you have 9 holes\n\n// function Game() {\n//   const [paused, setPaused] = useState(true);\n//   const [showMenu, setShowMenu] = useState(true);\n//   const [resetKey, setResetKey] = useState(0);\n//   const [started, setStarted] = useState(false);\n//   const [moles, setMoles] = useState(Array(MOLE_COUNT).fill(false));\n//   const [score, setScore] = useState(0);\n\n//   useEffect(() => {\n//     if (!paused) {\n//       const moleInterval = setInterval(() => {\n//         const nextMoles = Array(MOLE_COUNT).fill(false);\n//         const randomIndex = Math.floor(Math.random() * MOLE_COUNT);\n//         nextMoles[randomIndex] = true;\n//         setMoles(nextMoles);\n//       }, 1000);\n//       return () => clearInterval(moleInterval);\n//     } else {\n//       setMoles(Array(MOLE_COUNT).fill(false)); // hide moles if paused\n//     }\n//   }, [paused, resetKey]);\n\n//   const handleWhack = (index) => {\n//     if (moles[index]) {\n//       setScore((prev) => prev + 1);\n//       const newMoles = [...moles];\n//       newMoles[index] = false;\n//       setMoles(newMoles);\n//     }\n//   };\n\n//   function handleStart() {\n//     setPaused(false);\n//     setShowMenu(false);\n//     setStarted(true);\n//     setScore(0);\n//   }\n\n//   function handleResume() {\n//     setPaused(false);\n//     setShowMenu(false);\n//   }\n\n//   function handlePause() {\n//     setPaused(true);\n//     setShowMenu(true);\n//   }\n\n//   function handleRestart() {\n//     setResetKey((prev) => prev + 1);\n//     setPaused(false);\n//     setShowMenu(false);\n//     setStarted(true);\n//     setScore(0);\n//   }\n\n//   function handleTimeUp() {\n//     setPaused(true);\n//     setShowMenu(true);\n//     alert(Time is up! Your score: ${score});\n//   }\n\n//   return (\n//     <div style={{ textAlign: \"center\", marginTop: \"50px\" }}>\n//       <h2>Score: {score}</h2>\n//       <GameTimer\n//         startTime={30}\n//         paused={paused}\n//         resetTrigger={resetKey}\n//         onTimeUp={handleTimeUp}\n//       />\n\n//       {showMenu ? (\n//         <div style={{ marginTop: \"20px\" }}>\n//           <h2>{started ? \"Timer Paused\" : \"Timer Ready\"}</h2>\n//           {!started ? (\n//             <button onClick={handleStart}>Start</button>\n//           ) : (\n//             <>\n//               <button onClick={handleResume}>Resume</button>\n//               <button onClick={handleRestart} style={{ marginLeft: \"10px\" }}>\n//                 Restart\n//               </button>\n//             </>\n//           )}\n//         </div>\n//       ) : (\n//         <button onClick={handlePause} style={{ marginTop: \"20px\" }}>\n//           Pause\n//         </button>\n//       )}\n\n//       <GameBoard moles={moles} handleWhack={handleWhack} />\n//     </div>\n//   );\n// }\n\n// export default Game;\n\n\n\nimport React, { useState, useEffect } from \"react\";\nimport GameTimer from \"./Gametimer\";\nimport GameBoard from \"./GameBoard\";\n\nconst MOLE_COUNT = 9;\n\nfunction Game() {\n  const [paused, setPaused] = useState(true);\n  const [showMenu, setShowMenu] = useState(true);\n  const [resetKey, setResetKey] = useState(0);\n  const [started, setStarted] = useState(false);\n  const [moles, setMoles] = useState(Array(MOLE_COUNT).fill(false));\n  const [score, setScore] = useState(0);\n\n  useEffect(() => {\n    if (!paused) {\n      const moleInterval = setInterval(() => {\n        const nextMoles = Array(MOLE_COUNT).fill(false);\n        const randomIndex = Math.floor(Math.random() * MOLE_COUNT);\n        nextMoles[randomIndex] = true;\n        setMoles(nextMoles);\n      }, 1000);\n      return () => clearInterval(moleInterval);\n    } else {\n      setMoles(Array(MOLE_COUNT).fill(false));\n    }\n  }, [paused, resetKey]);\n\n  const handleWhack = (index) => {\n    if (moles[index]) {\n      setScore((prev) => prev + 1);\n      const newMoles = [...moles];\n      newMoles[index] = false;\n      setMoles(newMoles);\n    }\n  };\n\n  function handleStart() {\n    setPaused(false);\n    setShowMenu(false);\n    setStarted(true);\n    setScore(0);\n  }\n\n  function handleResume() {\n    setPaused(false);\n    setShowMenu(false);\n  }\n\n  function handlePause() {\n    setPaused(true);\n    setShowMenu(true);\n  }\n\n  function handleRestart() {\n    setResetKey((prev) => prev + 1);\n    setPaused(false);\n    setShowMenu(false);\n    setStarted(true);\n    setScore(0);\n  }\n\n  function handleTimeUp() {\n    setPaused(true);\n    setShowMenu(true);\n    alert(`Time is up! Your score: ${score}`);\n  }\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"50px\" }}>\n      <h2>Score: {score}</h2>\n      <GameTimer\n        startTime={30}\n        paused={paused}\n        resetTrigger={resetKey}\n        onTimeUp={handleTimeUp}\n      />\n\n      {showMenu ? (\n        <div style={{ marginTop: \"20px\" }}>\n          <h2>{started ? \"Timer Paused\" : \"Timer Ready\"}</h2>\n          {!started ? (\n            <button onClick={handleStart}>Start</button>\n          ) : (\n            <>\n              <button onClick={handleResume}>Resume</button>\n              <button onClick={handleRestart} style={{ marginLeft: \"10px\" }}>\n                Restart\n              </button>\n            </>\n          )}\n        </div>\n      ) : (\n        <button onClick={handlePause} style={{ marginTop: \"20px\" }}>\n          Pause\n        </button>\n      )}\n   {started && <GameBoard moles={moles} handleWhack={handleWhack} />}\n    </div>\n  );\n}\n\nexport default Game;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}